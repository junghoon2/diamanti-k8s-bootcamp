{{- if (include "kafka.metrics.jmx.createConfigmap" .) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "kafka.fullname" . }}-jmx-configuration
  labels: {{- include "kafka.labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "kafka.tplValue" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "kafka.tplValue" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  jmx-kafka-prometheus.yml: |-
    {{- include "kafka.tplValue" ( dict "value" .Values.metrics.jmx.config "context" $ ) | nindent 4 }}
    rules:
      # - pattern: kafka.controller<type=(ControllerChannelManager), name=(QueueSize), broker-id=(\d+)><>(Value)
      #   name: kafka_controller_$1_$2_$4
      #   labels:
      #     broker_id: "$3"
      # - pattern: kafka.controller<type=(ControllerChannelManager), name=(TotalQueueSize)><>(Value)
      #   name: kafka_controller_$1_$2_$3
      # - pattern: kafka.controller<type=(KafkaController), name=(.+)><>(Value)
      #   name: kafka_controller_$1_$2_$3
      # - pattern: kafka.controller<type=(ControllerStats), name=(.+)><>(Count)
      #   name: kafka_controller_$1_$2_$3
      # - pattern: kafka.server<type=(ReplicaFetcherManager), name=(.+), clientId=(.+)><>(Value)
      #   name: kafka_server_$1_$2_$4
      #   labels:
      #     client_id: "$3"
      # - pattern : kafka.network<type=(Processor), name=(IdlePercent), networkProcessor=(.+)><>(Value)
      #   name: kafka_network_$1_$2_$4
      #   labels:
      #     network_processor: $3
      # - pattern : kafka.network<type=(RequestMetrics), name=(RequestsPerSec), request=(.+)><>(Count)
      #   name: kafka_network_$1_$2_$4
      #   labels:
      #     request: $3
      # - pattern: kafka.server<type=(.+), name=(.+), topic=(.+)><>(Count|OneMinuteRate)
      #   name: kafka_server_$1_$2_$4
      #   labels:
      #     topic: $3
      # - pattern: kafka.server<type=(DelayedOperationPurgatory), name=(.+), delayedOperation=(.+)><>(Value)
      #   name: kafka_server_$1_$2_$3_$4
      # - pattern: kafka.server<type=(.+), name=(.+)><>(Count|Value|OneMinuteRate)
      #   name: kafka_server_$1_total_$2_$3
      # - pattern: kafka.server<type=(.+)><>(queue-size)
      #   name: kafka_server_$1_$2
      # - pattern: java.lang<type=(.+), name=(.+)><(.+)>(\w+)
      #   name: java_lang_$1_$4_$3_$2
      # - pattern: java.lang<type=(.+), name=(.+)><>(\w+)
      #   name: java_lang_$1_$3_$2
      # - pattern : java.lang<type=(.*)>
      # - pattern: kafka.log<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
      #   name: kafka_log_$1_$2
      #   labels:
      #     topic: $3
      #     partition: $4

      - pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
        name: kafka_server_$1_$2
        type: GAUGE
        labels:
          clientId: "$3"
          topic: "$4"
          partition: "$5"
      - pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
        name: kafka_server_$1_$2
        type: GAUGE
        labels:
          clientId: "$3"
          broker: "$4:$5"
      - pattern : kafka.coordinator.(\w+)<type=(.+), name=(.+)><>Value
        name: kafka_coordinator_$1_$2_$3
        type: GAUGE

      # Generic per-second counters with 0-2 key/value pairs
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
        name: kafka_$1_$2_$3_total
        type: COUNTER

      - pattern: kafka.server<type=(.+), client-id=(.+)><>([a-z-]+)
        name: kafka_server_quota_$3
        type: GAUGE
        labels:
          resource: "$1"
          clientId: "$2"

      - pattern: kafka.server<type=(.+), user=(.+), client-id=(.+)><>([a-z-]+)
        name: kafka_server_quota_$4
        type: GAUGE
        labels:
          resource: "$1"
          user: "$2"
          clientId: "$3"

      # Generic gauges with 0-2 key/value pairs
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
        name: kafka_$1_$2_$3
        type: GAUGE

      # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
      #
      # Note that these are missing the '_sum' metric!
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
        labels:
          "$4": "$5"
          "$6": "$7"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          "$6": "$7"
          quantile: "0.$8"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
        labels:
          "$4": "$5"
      - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          "$4": "$5"
          quantile: "0.$6"
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
        name: kafka_$1_$2_$3_count
        type: COUNTER
      - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
        name: kafka_$1_$2_$3
        type: GAUGE
        labels:
          quantile: "0.$4"



{{- end -}}
